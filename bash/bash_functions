#
# ~/.config/bash/bash_functions
#

# PS1 && term_name
change_term_name() {
    printf "%b" "\033]0;$1\007";
}
parse_git_status() {
    [ -z "$(git status --porcelain 2> /dev/null)" ] && printf "" || printf "[+]"
}
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
location_privileges() {
    if [ -z "$(pwd | grep "$HOME")" ]; then
        sudo -nv 2> /dev/null && echo "1;96" || echo "1;31" 
    else
        echo "0;1"
    fi
}
_PS1=1
toggle() {
    if [ "0" -eq "$_PS1" ]; then
        _PS1=1
        PS1='\[\e[0;1;31m\]$(parse_git_branch)\[\e[1;33m\]$(parse_git_status) \[\e[0;$(location_privileges)m\]\W\[\e[0;92m\]  \[\e[0m\]' # »
    else
        _PS1=0
        PS1='\[\e[0;92m\] \[\e[0m\]'
    fi
}

# extract - from https://gitlab.com/dwt1/dotfiles/-/blob/master/.bashrc
extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        echo "       path must be relative!!!"
        return 1
    fi

    for a in "$@"; do
        if [ ! -f "$a" ]; then echo "'$a' - file doesnt exist"; return 1; fi
    
        case "${n%,}" in
        *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                     tar xvf "$a"       ;;
        *.lzma)      unlzma ./"$a"      ;;
        *.bz2)       bunzip2 ./"$a"     ;;
        *.cbr|*.rar) unrar x -ad ./"$a" ;;
        *.gz)        gunzip ./"$a"      ;;
        *.cbz|*.epub|*.zip)       unzip ./"$a"       ;;
        *.z)         uncompress ./"$a"  ;;
        *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                     7z x ./"$a"        ;;
        *.xz)        unxz ./"$a"        ;;
        *.exe)       cabextract ./"$a"  ;;
        *.cpio)      cpio -id < ./"$a"  ;;
        *.cba|*.ace) unace x ./"$a"     ;;
        *)           echo "extract: '$a' - unknown archive method"
                     return 1 ;;
        esac
    done
}

# Cool navigation
VERBOSE_JUMP="T"
# SELECTOR="fzf --ansi --border=rounded --preview 'tree -m -p {} -y 64' --tiebreak=\"begin,length\""
SELECTOR="dmenu -c -l 10"

N_PLACES=""
N_PLACES="$(find "$HOME/.local/suckless" -maxdepth 1 -type d)\n$N_PLACES"
N_PLACES="$(find "$HOME/stuff/code" -maxdepth 1 -type d)\n$N_PLACES"
N_PLACES="$HOME/.config\n$N_PLACES"
N_PLACES="$HOME/.config/bash\n$N_PLACES"
N_PLACES="$HOME/.config/nvim\n$N_PLACES"
N_PLACES="$HOME/.config/surf\n$N_PLACES"
N_PLACES="$HOME/.local/scripts\n$N_PLACES"

G_PLACES="$N_PLACES"
G_PLACES="$HOME/stuff\n$G_PLACES"
G_PLACES="$HOME/stuff/.dotfiles\n$G_PLACES"
G_PLACES="$HOME/stuff/bacup\n$G_PLACES"
G_PLACES="$HOME/stuff/code\n$G_PLACES"
G_PLACES="$HOME/stuff/documents\n$G_PLACES"
G_PLACES="$HOME/stuff/downloads\n$G_PLACES"
G_PLACES="$HOME/stuff/music\n$G_PLACES"
G_PLACES="$HOME/stuff/pictures\n$G_PLACES"

N_PLACES="$(printf "%b" "$N_PLACES" | sed "s|$HOME|~|" | sort -u)"
G_PLACES="$(printf "%b" "$G_PLACES" | sed "s|$HOME|~|" | sort -u)"
[ "$VERBOSE_JUMP" = "T" ] && VERBOSE_JUMP="&& pwd" || VERBOSE_JUMP=""

# go to path
g_() {
    JUMP="$(printf "%b" "$G_PLACES" | sort -f | ${SELECTOR} | sed "s|~|$HOME|")"

    [ -d "$JUMP" ] && cd "$JUMP" && [ "$VERBOSE_JUMP" ] && pwd
}
# nvim to path
n_() {
    JUMP="$(printf "%b" "$N_PLACES" | sort -f | ${SELECTOR} | sed "s|~|$HOME|")"

    [ -d "$JUMP" ] && cd "$JUMP" && { [ "$VERBOSE_JUMP" ] && pwd; nvim; }
}

# bash_shortcuts generator
SHORTCUTS_FILE="$HOME/.config/bash/bash_shortcuts"
g_alias() {
    echo "alias g_$1='cd $2 $VERBOSE_JUMP'" >> "$SHORTCUTS_FILE"
}
n_alias() {
    echo "alias n_$1='cd $2 $VERBOSE_JUMP && nvim'" >> "$SHORTCUTS_FILE"
}

bash_shortcut_gen() {
    echo "#" > "$SHORTCUTS_FILE"
    echo "# ~/.config/bash/bash_shortcuts" >> "$SHORTCUTS_FILE"
    echo "#" >> "$SHORTCUTS_FILE"
    echo "# file generated by ~/.config/bash/bash_functions - $(date +"%F %T")" >> "$SHORTCUTS_FILE"
    echo "#" >> "$SHORTCUTS_FILE"
    echo "" >> "$SHORTCUTS_FILE"

    echo "# nvim ------------------------------------------------------------------" >> "$SHORTCUTS_FILE"
    for PLACE in $(printf "%b" "$N_PLACES" | sed "s|~|$HOME|"); do
        n_alias "${PLACE##*/}" "$PLACE"
    done

    echo "" >> "$SHORTCUTS_FILE"
    echo "# go --------------------------------------------------------------------" >> "$SHORTCUTS_FILE"
    for PLACE in $(printf "%b" "$G_PLACES" | sed "s|~|$HOME|"); do
        g_alias "${PLACE##*/}" "$PLACE"
    done

    # notify-send --urgency=normal -t 1000 -i "terminal" "shortcut file updated ...ᘛ⁐̤ᕐᐷ"
}
# update shortcuts
[ "~/.config/bash/bash_functions" -nt "~/.config/bash/bash_shortcuts" ] \
    && bash_shortcut_gen

# unset
unset -f bash_shortcut_gen
unset -f g_alias
unset -f n_alias

unset SHORTCUTS_FILE

