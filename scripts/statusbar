#!/bin/sh
# sources:
#     https://lecorbeausvault.wordpress.com/2020/09/28/statusbar-sh-simple-shell-script-for-dwms-bar/
#     https://www.reddit.com/r/archlinux/comments/k7ynny/dwm_status_bar_script_for_only_displaying_battery/

# set -v
set -eu

bat_prev=-1
bat_state=""
BATTERY_STR=""
battery() {
    cap="$(cat "/sys/class/power_supply/BAT0/capacity")"
    state="$(cat "/sys/class/power_supply/BAT0/status")"

    [ "$bat_prev" -eq "$cap" ] && [ "$bat_state" = "$state" ] && return 0

    bat_prev="$cap"
    bat_state="$state"

    if [ "$state" = "Charging" ]; then
        if [ "$BRIGHTNESS" = "low" ]; then
            sudo brightness norm
            BRIGHTNESS="norm"
        fi

        BATTERY_STR="󰂄 $cap%"
    elif [ "$cap" -ge 90 ]; then
        if [ "$cap" -eq 100 ]; then
            (herbe "󰁹 full battery" "$cap%" &)
        fi

        BATTERY_STR="󰁹 $cap%"
    elif [ "$cap" -ge 70 ]; then
        BATTERY_STR="󰂀 $cap%"
    elif [ "$cap" -ge 50 ]; then
        BATTERY_STR="󰁾 $cap%"
    elif [ "$cap" -ge 15 ]; then
        BATTERY_STR="󰁻 $cap%"
    else
        if [ "$BRIGHTNESS" = "norm" ]; then
            sudo brightness low
            BRIGHTNESS="low"
        fi

        (herbe "󰂃 low battery" "$cap%" &)
        BATTERY_STR="󰂃 $cap%"
    fi
}

# usbmon() {
# 	usb1=$(lsblk -la | awk '/sdc1/ { print $1 }')
# 	usb1mounted=$(lsblk -la | awk '/sdc1/ { print $7 }')
#
# 	if [ "$usb1" ]; then
# 		if [ -z "$usb1mounted" ]; then
# 			echo " |"
# 		else
# 			echo " $usb1 |"
# 		fi
# 	fi
# }

network() {
	conntype=$(ip route | awk '/default/ { print substr($5,1,1) }')

	if [ -z "$conntype" ]; then
		echo "󰤯  disconected"
	elif [ "$conntype" = "e" ]; then
		echo " "
	elif [ "$conntype" = "w" ]; then
        echo "󰤨  $(nmcli | grep -F "wlo1: connected to" | cut -d ' ' -f 4)"
	fi
}

volume_pa() {
	muted=$(pactl list sinks | awk '/Mute:/ { print $2 }')
	vol=$(pactl list sinks | grep Volume: | awk 'FNR == 1 { print $5 }' | cut -f1 -d '%')

	if [ "$muted" = "yes" ]; then
		echo "󰝟"
	else
		if [ "$vol" -ge 65 ]; then
			echo "  $vol%"
		elif [ "$vol" -ge 40 ]; then
			echo "  $vol%"
		elif [ "$vol" -ge 0 ]; then
			echo "  $vol%"
		fi
	fi

}

VOLUME_STR=""
volume_alsa() {
    muted=$(amixer -M sget Master | awk 'FNR == 6 { print $6 }')
    vol=$(amixer -M sget Master | awk 'FNR == 6 { print $5 }' | sed 's/[][]//g; s/%//g')

	if [ "$muted" = "[off]" ]; then
		VOLUME_STR="󰝟"
	else
		if [ "$vol" -ge 65 ]; then
			VOLUME_STR="  $vol%"
		elif [ "$vol" -ge 40 ]; then
			VOLUME_STR="  $vol%"
		# elif [ "$vol" -ge 0 ]; then
        else
			VOLUME_STR="  $vol%"
		fi
	fi
}

# backlight() {
#     BRIGHTNESS_DIR="/sys/class/backlight/intel_backlight"
#     max="$(cat "$BRIGHTNESS_DIR/max_brightness")"
#     brightness="$(cat "$BRIGHTNESS_DIR/brightness")"
#
#     echo "󰃠  $((brightness * 100 / max))%"
# }

day() {
    date +"%a, %d %b."
}

clock() {
	date +"%H:%M" # 
}

###############################################################################
# BRIGHTNESS_STR=""

update_bar() {
    battery
    # xsetroot -name " $(clock) ; $BRIGHTNESS_STR | $VOLUME_STR | $(battery) | $(network) | $(day) "
    xsetroot -name " $(clock) ;| $VOLUME_STR | $BATTERY_STR | $(network) | $(day) "
}

# to much many lot of problems from this...
volumen_change() {
    volume_alsa
    main_loop
}
# brightness_change() {
#     BRIGHTNESS_STR="$(backlight)"
# }
trap volumen_change    USR1
# trap brightness_change USR2

main_loop() {
	while true; do
        update_bar
		sleep 60 &
        wait "$!"
	done
}

###############################################################################
[ "$(cat /sys/class/power_supply/BAT0/capacity)" -ge 15 ] \
    && BRIGHTNESS="norm" \
    || BRIGHTNESS="low"
sudo brightness "$BRIGHTNESS"

volumen_change
# brightness_change

main_loop
